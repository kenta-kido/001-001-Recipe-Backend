# The name of the Spring Boot application
spring.application.name=backend

# # H2 Database Configuration (currently commented out)
# # The following lines configure an in-memory H2 database for testing or development
# # Uncomment them if using H2 for testing purposes.
# spring.datasource.url=jdbc:h2:mem:testdb
# spring.datasource.driverClassName=org.h2.Driver
# spring.datasource.username=sa
# spring.datasource.password=password
# spring.h2.console.enabled=true  # Enables H2 web console for development
# spring.datasource.platform=h2

# # PostgreSQL Database Configuration for local environment
# # This configuration connects to a PostgreSQL database running on localhost
# spring.datasource.url=jdbc:postgresql://localhost:5432/test_spring2
# spring.datasource.username=postgres  # Username for PostgreSQL
# spring.datasource.password=postgres  # Password for PostgreSQL
# spring.datasource.driver-class-name=org.postgresql.Driver  # JDBC driver for PostgreSQL

# # Default passwords for different users for local environment
# dev.default.password=local
# test.default.password=local

# JWT Configuration for local environment
# The secret key used for signing and verifying JWT tokens
security.jwt.secret-key=verysecretkeyohmygodwhyisitsososecretdonttellanybody

# PostgreSQL Database Configuration for Heroku environment
# This configuration connects to a PostgreSQL database running on Heroku
spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${JDBC_DATABASE_USERNAME}
spring.datasource.password=${JDBC_DATABASE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Default passwords for different users for Heroku environment
dev.default.password=${DEV_PASSWORD}
test.default.password=${TEST_PASSWORD}

# # JWT Configuration for Heroku environment
# # The secret key used for signing and verifying JWT tokens 
# security.jwt.secret-key=${JWT_SECRET_KEY}

# JPA Configuration
# Hibernate DDL Auto setting: "update" will update the schema on each application start.
# Change to "create" if you want to recreate the schema each time.
spring.jpa.hibernate.ddl-auto=update  
# Enable SQL query logging in the console
spring.jpa.show-sql=true
# Specify the dialect for PostgreSQL
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# Delays the initialization of the datasource until after the schema is created
spring.jpa.defer-datasource-initialization=true

# File Upload Configuration
# Set the maximum file size and request size for uploaded files
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
